/* ***
 * fbtext.cpp - The graphical console driver, includes bitmap font
 * Copyright (C) 2014-2015  Meisaka Yukara
 *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 *     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include "fbtext.hpp"

static const uint32_t ec1242[] = {
 0xcc993366, 0xcc993366,0x3399cc66, 0x3399cc66,0x55aa55aa, 0x55aa55aa,
 0x10f01010, 0x101010f0,0x101f1010, 0x1010101f,0xff000000, 0x28282828,
 0xff282828, 0x00000000,0x2f282828, 0x28282828,0xe8282828, 0x28282828,
 0x00ff1010, 0x000000ff,0x00ff0000, 0x101010ff,0x00ff0000, 0x000000ff,
 0x28282828, 0x28282828,0x203f0000, 0x2828282f,0x08f80000, 0x282828e8,
 0x202f2828, 0x0000003f,0x08e82828, 0x000000f8,0x202f2828, 0x2828282f,
 0x08e82828, 0x282828e8,0x00ff0000, 0x282828ef,0x00ef2828, 0x000000ff,
 0x00ef2828, 0x282828ef,0xff000000, 0x00000000,0x1f000000, 0x10101010,
 0xf0000000, 0x10101010,0x1f101010, 0x00000000,0xf0101010, 0x00000000,
 0x1f101010, 0x10101010,0xf0101010, 0x10101010,0xff000000, 0x10101010,
 0xff101010, 0x00000000,0xff101010, 0x10101010,0x00000000, 0x00000000,
 0x30303030, 0x00100010,0x00282800, 0x00000000,0x287c2828, 0x0028287c,
 0x38507c10, 0x00107c14,0x1c70a8c4, 0x0000462a,0x30204870, 0x0074484c,
 0x00101000, 0x00000000,0x20201008, 0x00081020,0x08081020, 0x00201008,
 0xd6285410, 0x00105428,0x7c101000, 0x00001010,0x00000000, 0x00301000,
 0x3c000000, 0x00000000,0x00000000, 0x00181800,0x10100808, 0x00202010,
 0x64544c7c, 0x007c4444,0x08281808, 0x003c0808,0x3c04443c, 0x007c4040,
 0x18044478, 0x007c0404,0x7c444424, 0x00040404,0x7840407c, 0x007c0404,
 0x78404078, 0x007c4444,0x0404447c, 0x00201008,0x3844447c, 0x007c4444,
 0x7c444478, 0x007c0404,0x00001800, 0x00000018,0x10003000, 0x00006030,
 0x30180c06, 0x00060c18,0x003c0000, 0x0000003c,0x0c183060, 0x00603018,
 0x180c4c3c, 0x00100010,0x544c4438, 0x00384458,0x4c587060, 0x0044447c,
 0x78444870, 0x00784444,0x40404078, 0x007c4040,0x44444870, 0x00704844,
 0x70404078, 0x007c4040,0x7820203c, 0x00202020,0x40404038, 0x007c444c,
 0x7c444444, 0x00444444,0x10101038, 0x00381010,0x0808081c, 0x00384808,
 0x60504840, 0x004c5870,0x40404040, 0x007c4040,0x44545478, 0x00444444,
 0x5c746444, 0x0044444c,0x44444478, 0x003c4444,0x7c444870, 0x00404040,
 0x44444478, 0x00344c5c,0x7c444870, 0x00444850,0x38404478, 0x003c4404,
 0x1010107c, 0x00101010,0x44444444, 0x00784c44,0x584c4444, 0x00406070,
 0x44444444, 0x007c5454,0x10386c44, 0x00446c38,0x386c4444, 0x00101010,
 0x180c047c, 0x007c6030,0x20202038, 0x00382020,0x10204040, 0x00040408,
 0x08080838, 0x00380808,0x00442810, 0x00000000,0x00000000, 0xff000000,
 0x00081020, 0x00000000,0x7c000000, 0x003c6c1c,0x7c606000, 0x00786464,
 0x78000000, 0x00786060,0x7c0c0c00, 0x003c4c4c,0x3c000000, 0x003c7864,
 0x60603800, 0x006060f8,0x7c000000, 0x780c7c4c,0x7c606000, 0x00646464,
 0x10001000, 0x00303030,0x10001000, 0x38581818,0xd0404000, 0x00c8d0e0,
 0x60606000, 0x00706060,0xf8000000, 0x00c4c4d4,0x78000000, 0x00646464,
 0x78000000, 0x003c6464,0x78000000, 0x60607c64,0x3c000000, 0x0e0c3c4c,
 0x6c600000, 0x00606070,0x603c0000, 0x007c0c7c,0x7c600000, 0x00386060,
 0x4c000000, 0x003c4c4c,0x64000000, 0x00306864,0xc4000000, 0x00fcd4c4,
 0x386c0000, 0x006c3810,0x64640000, 0x30187c64,0x187c0000, 0x007c6030,
 0x20101008, 0x00081010,0x10101010, 0x10101010,0x08101020, 0x00201010,
 0x004c3200, 0x00000000,0xaaaaaaee, 0x000000ee,0x40f0443c, 0x007c40f0,
 0xffffffff, 0xffffffff,0x10000000, 0x00000010,0x3810100c, 0x00601010,
 0x28000000, 0x00000028,0x00000000, 0x00540000,0x10103810, 0x00001010,
 0x10103810, 0x00001038,0x00002810, 0x00000000,0xe05ca040, 0x00245a24,
 0xb0483810, 0x1f11513f,0x10080400, 0x00000408,0xffffffff, 0x00000000,
 0x00000000, 0xffffffff,0xf0f0f0f0, 0xf0f0f0f0,0x0f0f0f0f, 0x0f0f0f0f,
 0x00000000, 0x00000000,0x00040808, 0x00000000,0x00201010, 0x00000000,
 0x00142828, 0x00000000,0x00502828, 0x00000000,0x18000000, 0x00000018,
 0x7c000000, 0x00000000,0xfe000000, 0x00000000,0x00005028, 0x00000000,
 0x00555ee0, 0x00000000,0x7e60fe40, 0x522ca46a,0x10204000, 0x00004020,
 0x047c0000, 0xfe080804,0x127e1000, 0x46222212,0xfc007800, 0x70080404,
 0x4c4e4aec, 0x0000004a,0xe08080e0, 0x00000000,0x18100010, 0x00181818,
 0x40407810, 0x00001078,0x70202438, 0x007c2420,0x24241a20, 0x00000458,
 0x7c284444, 0x00103810,0x00101010, 0x00101010,0x28704438, 0x00384418,
 0x00000028, 0x00000000,0xa2ba82fc, 0x007e82ba,0x241c0438, 0x0000001c,
 0xd86c3600, 0x0000366c,0x7c000000, 0x00000004,0x00000000, 0x00000000,
 0xb2aab2fc, 0x007e82aa,0x00000038, 0x00000000,0x0060a0c0, 0x00000000,
 0x7c101000, 0x007c1010,0x40301060, 0x00000070,0x10601060, 0x00000070,
 0x00001008, 0x00000000,0x64640000, 0x4040746c,0x7a4a4a3e, 0x000a0a0a,
 0x10000000, 0x00000000,0x00000000, 0x00180800,0x70206020, 0x00000000,
 0x24242418, 0x00000018,0x366cd800, 0x0000d86c,0xfa52c844, 0x0042221e,
 0xfc50c844, 0x004e2c12,0x3a7228c4, 0x004222de,0x30100010, 0x00786460,
 0x70001020, 0x44447c48,0x70001008, 0x44447c48,0x70002810, 0x44447c48,
 0x70005028, 0x44447c48,0x70000028, 0x44447c48,0x70102810, 0x44447c48,
 0x4c28281e, 0x008e8878,0x4040403c, 0x38083c40,0x7c001020, 0x7c407040,
 0x7c001008, 0x7c407040,0x7c002810, 0x7c407040,0x7c000028, 0x7c407040,
 0x38001020, 0x38101010,0x38001008, 0x38101010,0x38002810, 0x38101010,
 0x38000028, 0x38101010,0xe4444478, 0x00784444,0x64442814, 0x00444c54,
 0x44781020, 0x003c4444,0x44781008, 0x003c4444,0x44782810, 0x003c4444,
 0x44785028, 0x003c4444,0x44780028, 0x003c4444,0x10280000, 0x00000028,
 0x544c3c02, 0x00807864,0x4c001020, 0x003c4c4c,0x4c001008, 0x003c4c4c,
 0x4c002810, 0x003c4c4c,0x4c000028, 0x003c4c4c,0x44441008, 0x00101028,
 0x44784060, 0x00604078,0x24282438, 0x00582424,0x7c001020, 0x003c6c1c,
 0x7c001008, 0x003c6c1c,0x7c002810, 0x003c6c1c,0x7c005028, 0x003c6c1c,
 0x7c000028, 0x003c6c1c,0x7c102810, 0x003c6c1c,0x126c0000, 0x006c907c,
 0x40380000, 0x30103840,0x3c001020, 0x003c7864,0x3c001008, 0x003c7864,
 0x3c002810, 0x003c7864,0x3c000028, 0x003c7864,0x10001020, 0x00303030,
 0x10001008, 0x00303030,0x10002810, 0x00303030,0x10000028, 0x00303030,
 0x3c140814, 0x00384444,0x78002814, 0x00646464,0x78001020, 0x003c6464,
 0x78001008, 0x003c6464,0x78002810, 0x003c6464,0x78005028, 0x003c6464,
 0x78000028, 0x003c6464,0x38001000, 0x00001000,0x4c3c0000, 0x00786454,
 0x4c001020, 0x003c4c4c,0x4c001008, 0x003c4c4c,0x4c002810, 0x003c4c4c,
 0x4c000028, 0x003c4c4c,0x64641008, 0x30187c64,0x48704040, 0x00604070,
 0x64640028, 0x30187c64
};

static const uint32_t ufgcolors[16] = {
	0x00cccccc,
	0x00ff3300,
};
static const uint32_t ubgcolors[16] = {
	0x00000022,
};
static inline uint32_t roll(uint32_t v) {
	return (v << 1) | (v >> 31);
}
static inline uint32_t roll8(uint32_t v) {
	return (v << 8) | (v >> 24);
}
static inline uint32_t rolr8(uint32_t v) {
	return (v << 24) | (v >> 8);
}

void FramebufferText::dispchar32(uint8_t c, uint32_t x, uint32_t y) {
	uint32_t e1 = ec1242[c*2];
	uint32_t e2 = ec1242[c*2+1];
	uint8_t *lp;
	uint32_t *cp;
	lp = fbb + (pitch * y) + (x * 4);
	for(unsigned il = 0; il < 4; il++) {
		cp = reinterpret_cast<uint32_t*>(lp);
		lp += pitch;
	for(unsigned ix = 8; ix ;) {
		ix--;
		*cp = (e1 & (1 << ix)) ? fgcolor:bgcolor;
		cp++;
	}
		e1 = rolr8(e1);
	}
	for(unsigned il = 0; il < 4; il++) {
		cp = reinterpret_cast<uint32_t*>(lp);
		lp += pitch;
	for(unsigned ix = 8; ix ;) {
		ix--;
		*cp = (e2 & (1 << ix)) ? fgcolor:bgcolor;
		cp++;
	}
		e2 = rolr8(e2);
	}
}
void FramebufferText::setoffset(uint32_t x, uint32_t y) {
	origin.x = x;
	origin.y = y;
}
void FramebufferText::render_vc(xiv::VirtTerm &vc) {
	uint32_t xco = origin.x;
	uint32_t yco = origin.y;
	uint32_t ro = 0;
	for(int y = 0; y < vc.height; y++) {
		xco = origin.x;
		for(int x = 0; x < vc.width; x++) {
			uint32_t att = vc.buffer[x+ro].attr;
			if(att & xiv::ATTR_UPDATE) {
				vc.buffer[x+ro].attr ^= xiv::ATTR_UPDATE;
				fgcolor = ufgcolors[att & 0xf];
				bgcolor = ubgcolors[(att >> 4) & 0xf];
				dispchar32(cast<uint8_t>(vc.buffer[x+ro].code), xco, yco);
			}
			xco += 8;
		}
		ro += vc.width;
		yco += 8;
	}
}

FramebufferText::FramebufferText(void *vm, uint32_t p, uint8_t bits) {
	fbb = reinterpret_cast<uint8_t*>(vm);
	pitch = p;
	switch(bits) {
	case 32:
		bitmode = 0;
		break;
	case 24:
		bitmode = 1;
		break;
	case 16:
		bitmode = 2;
		break;
	case 15:
		bitmode = 3;
		break;
	case 8:
		bitmode = 4;
		break;
	}
	col = 0;
	row = 0;
	hlim = 90;
	vlim = 90;
	fgcolor = ufgcolors[0];
	bgcolor = ubgcolors[0];
}
FramebufferText::~FramebufferText() {
}

void FramebufferText::setto(uint16_t c, uint16_t r) {
	if(r > vlim) row = vlim; else row = r;
	if(c > hlim) col = hlim; else col = c;
}
uint16_t FramebufferText::getrow() const {
	return row;
}
uint16_t FramebufferText::getcol() const {
	return col;
}
void FramebufferText::putc(char c) {
	putat(col, row, c);
	col++;
	if(col >= hlim) {
		nextline();
	}
}
void FramebufferText::putat(uint16_t c, uint16_t r, char v) {
	dispchar32(cast<uint8_t>(v), origin.x + (c * 8), origin.y + (r * 8));
}
void FramebufferText::nextline() {
	col = 0;
	row++;
	if(row >= vlim) {
		row = 0;
	}
}

